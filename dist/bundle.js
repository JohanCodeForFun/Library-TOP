(()=>{"use strict";var e={d:(t,r)=>{for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Q:()=>y});const t=function(){const e=document.querySelector("#submitBook");function t(e){e.preventDefault();const{title:t,author:r,pages:o,isRead:n}={title:document.querySelector("#inputTitle").value,author:document.querySelector("#inputAuthor").value,pages:parseInt(document.querySelector("#inputPages").value,10),isRead:document.querySelector("#inputIsRead").checked};y.addBook(t,r,o,n)}return{initializeEventListeners:function(){null==e||e.addEventListener("click",t)}}};function r(e,t,r=!0){const o=r?1:-1,n=e.tBodies[0],i=Array.from(n.querySelectorAll("tr")).sort(((e,r)=>e.querySelector(`td:nth-child(${t+1})`).textContent.trim()>r.querySelector(`td:nth-child(${t+1})`).textContent.trim()?1*o:-1*o));for(;n.firstChild;)n.removeChild(n.firstChild);n.append(...i),e.querySelectorAll("th").forEach((e=>e.classList.remove("th-sort-asc","th-sort-desc"))),e.querySelector(`th:nth-child(${t+1})`).classList.toggle("th-sort-asc",r),e.querySelector(`th:nth-child(${t+1})`).classList.toggle("th-sort-desc",!r)}document.querySelectorAll(".table-sortable th").forEach((e=>{e.addEventListener("click",(()=>{var t,o,n;r(null===(o=null===(t=e.parentElement)||void 0===t?void 0:t.parentElement)||void 0===o?void 0:o.parentElement,Array.prototype.indexOf.call(null===(n=e.parentElement)||void 0===n?void 0:n.children,e),!e.classList.contains("th-sort-asc"))}))}));const o=r;var n,i,a,s,l,c=function(e,t,r,o,n){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?n.call(e,r):n?n.value=r:t.set(e,r),r},d=function(e,t,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(e):o?o.value:t.get(e)};n=new WeakMap,i=new WeakMap,a=new WeakMap,s=new WeakMap,l=new WeakMap;const u=class{constructor(e,t,r,o,d){n.set(this,void 0),i.set(this,void 0),a.set(this,void 0),s.set(this,void 0),l.set(this,void 0),c(this,n,e,"f"),c(this,i,t,"f"),c(this,a,r,"f"),c(this,s,o,"f"),c(this,l,d,"f")}get id(){return d(this,n,"f")}get title(){return d(this,i,"f")}set title(e){c(this,i,e,"f")}get author(){return d(this,a,"f")}set author(e){c(this,a,e,"f")}get pages(){return d(this,s,"f")}set pages(e){c(this,s,e,"f")}get isRead(){return d(this,l,"f")}set isRead(e){c(this,l,e,"f")}},h=document.querySelector('[data-bs-toggle="popover"]');new bootstrap.Popover(h);var f,p=function(e,t,r,o,n){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?n.call(e,r):n?n.value=r:t.set(e,r),r},m=function(e,t,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(e):o?o.value:t.get(e)};const v=document.querySelector("#booksBody");f=new WeakMap;document.addEventListener("DOMContentLoaded",(()=>{t().initializeEventListeners();const e=document.querySelector("table");e&&o(e,0,!0)}));const y=new class{constructor(){f.set(this,void 0),p(this,f,[],"f")}addBook(e,t,r,o){const n=0===m(this,f,"f").length?1:Math.max(...m(this,f,"f").map((e=>e.id)))+1,i=new u(n,e,t,r,o);m(this,f,"f").push(i),(()=>{const e=document.querySelector("#modal"),t=document.querySelector('[data-bs-toggle="popover"]'),r=document.querySelector("#submitBook");if(!e||!t||!r)return void console.error("Modal, popover or button element not found");const o=bootstrap.Popover.getInstance(t)||new bootstrap.Popover(t);r.style.pointerEvents="none",r.style.color="lightgray",setTimeout((()=>{(e=>{e.style.display="none",e.setAttribute("aria-hidden","true"),e.removeAttribute("aria-modal"),e.removeAttribute("role"),e.classList.remove("fade");const t=document.querySelector(".modal-backdrop");t&&t.remove()})(e),(e=>{e.style.pointerEvents="",e.style.color=""})(r),o.hide()}),2100)})(),this.loadLibrary()}fillLibrary(){const e=new u(1,"Zero To One","Peter Thiel",210,!0),t=new u(2,"Hackers & Painters","Paul Graham",258,!0),r=new u(3,"Computer Science Distilled","Wladston Ferreira Filho",168,!0),o=new u(4,"Grokking Algorithms","Aditya Y. Bhargava",238,!0),n=new u(5,"START SMALL, STAY SMALL","Rob Walling",201,!1);m(this,f,"f").push(e,t,r,o,n)}loadLibrary(){const e=this.getBooks().map((e=>`\n        <tr>\n          <td> ${e.title} </td>\n          <td> ${e.author} </td>\n          <td> ${e.pages} </td>\n          <td> \n          <div class="form-check">\n          <label class="form-check-label" for="flexCheckDefault-${e.id}">Read</label>\n          <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault-${e.id}" ${this.getCheckedAttribute(e.isRead)}>\n          </div>\n          </td>\n          <td> <button value="${e.id}" class="btn btn-danger">Remove</button> </td>\n        </tr>`)).join("");v.innerHTML=e,this.addDeleteEventListeners(),this.addIsReadEventListeners()}getBooks(){return m(this,f,"f")}removeBook(e){return p(this,f,m(this,f,"f").filter((t=>t.id!==e)),"f"),this.loadLibrary(),m(this,f,"f")}getCheckedAttribute(e){return e?"checked":""}updateIsRead(e){let t=m(this,f,"f").find((t=>t.id===e));t?(t.isRead=!t.isRead,this.loadLibrary()):console.error("no book found")}addDeleteEventListeners(){const e=document.querySelectorAll("button.btn-danger");Array.from(e).map((e=>e)).forEach((e=>{e.addEventListener("click",(e=>{const t=e.target;if(t){const e=parseInt(t.value);y.removeBook(e)}}))}))}addIsReadEventListeners(){const e=document.querySelectorAll('input[type="checkbox"]');Array.from(e).map((e=>e)).filter((e=>"inputIsRead"!==e.id)).forEach((e=>{e.addEventListener("click",(()=>{const t=e.id.match(/\d+$/);if(t){const e=parseInt(t[0],10);y.updateIsRead(e)}else console.error("No numeric part found in the id")}))}))}};y.fillLibrary(),y.loadLibrary()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,